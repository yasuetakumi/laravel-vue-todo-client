image: node:12.20.1

pipelines:
  branches:
    # release/live_deploy_ssh: #please create this branch first time before start test_deploy.
    #   - step:
    #       name: Yarn run build
    #       caches:
    #         - node
    #       script:
    #         - node
    #         - yarn
    #         - rm .env && cp .env.production .env && cat .env
    #         - yarn run build
    #         - ls dist
    #       artifacts: # Share files to after step.
    #         - dist/**
    #   - step:
    #       name: Deploy to EC2 by SSH
    #       caches:
    #         - composer
    #       script:
    #         - pipe: atlassian/rsync-deploy:0.3.1
    #           variables:
    #             USER: $AWS_EC2_USER
    #             SERVER: $AWS_EC2_HOST
    #             REMOTE_PATH: '/usr/share/nginx/btobpointsystem/client/'
    #             LOCAL_PATH: 'dist/'
    #             EXTRA_ARGS: '--exclude-from=deployment-exclude-list.txt --ignore-times'
    #             DEBUG: 'true'
    #             SSH_PORT: $AWS_EC2_PORT
    #   - step:
    #       name: Deploy docker files to EC2 by SSH
    #       caches:
    #         - composer
    #       script:
    #         - pipe: atlassian/rsync-deploy:0.3.1
    #           variables:
    #             USER: $AWS_EC2_USER
    #             SERVER: $AWS_EC2_HOST
    #             REMOTE_PATH: '/usr/share/nginx/btobpointsystem/docker/'
    #             LOCAL_PATH: 'docker/'
    #             EXTRA_ARGS: '--exclude-from=deployment-exclude-list.txt --ignore-times'
    #             DEBUG: 'true'
    #             SSH_PORT: $AWS_EC2_PORT
    # release/test_deploy_ssh: #please create this branch first time before start test_deploy.
    #   - step:
    #       name: Yarn run build
    #       caches:
    #         - node
    #       script:
    #         - node
    #         - yarn
    #         - rm .env && cp .env.staging .env && cat .env
    #         - yarn run build
    #         - ls dist
    #       artifacts: # Share files to after step.
    #         - dist/**
    #   - step:
    #       name: Deploy to EC2 by SSH
    #       caches:
    #         - composer
    #       script:
    #         - pipe: atlassian/rsync-deploy:0.3.1
    #           variables:
    #             USER: $AWS_EC2_USER
    #             SERVER: $AWS_EC2_HOST
    #             REMOTE_PATH: '/usr/share/nginx/btobpointsystem/client_test/'
    #             LOCAL_PATH: 'dist/'
    #             EXTRA_ARGS: '--exclude-from=deployment-exclude-list.txt --ignore-times'
    #             DEBUG: 'true'
    #             SSH_PORT: $AWS_EC2_PORT
    release/test_deploy_ftp: #please create this branch first time before start test_deploy.
      - step:
          name: Yarn run build
          caches:
            - node
          script:
            - node
            - yarn
            - rm .env && cp .env.test_on_xserver .env && cat .env
            - yarn run build
            - ls dist
          artifacts: # Share files to after step.
            - dist/**
      - step:
          name: Deploy to XServer by FTP (First time)
          script:
            - apt-get update
            - apt-get -qq install git-ftp
            - git config git-ftp.user $FTP_USERNAME_TEST
            - git config git-ftp.password $FTP_PASSWORD_TEST
            - git config git-ftp.url $FTP_HOST_PATH_TEST
            - git config git-ftp.syncroot dist/ # .git-ftp-include file is necessary because dist directory is ignored by .gitignore
            - ls dist
            - git ftp push -s deploy_to_xserver
    release/deploy_demo_site: # DEMO SITE(push)
      - step:
          name: Yarn run build
          caches:
            - node
          script:
            - node
            - yarn
            - rm .env && cp .env.demo_on_xserver .env && cat .env
            - yarn run build
            - ls dist
          artifacts: # Share files to after step.
            - dist/**
      - step:
          name: Deploy to XServer by FTP (First time)
          script:
            - apt-get update
            - apt-get -qq install git-ftp
            - git config git-ftp.user $FTP_USERNAME_DEMO
            - git config git-ftp.password $FTP_PASSWORD_DEMO
            - git config git-ftp.url $FTP_HOST_PATH_DEMO
            - git config git-ftp.syncroot dist/ # .git-ftp-include file is necessary because dist directory is ignored by .gitignore
            - ls dist
            - git ftp push --force -s deploy_to_xserver
    release/deploy_demo_site_init: # DEMO SITE(init)
      - step:
          name: Yarn run build
          caches:
            - node
          script:
            - node
            - yarn
            - rm .env && cp .env.demo_on_xserver .env && cat .env
            - yarn run build
            - ls dist
          artifacts: # Share files to after step.
            - dist/**
      - step:
          name: Deploy to XServer by FTP (First time)
          script:
            - apt-get update
            - apt-get -qq install git-ftp
            - git config git-ftp.user $FTP_USERNAME_DEMO
            - git config git-ftp.password $FTP_PASSWORD_DEMO
            - git config git-ftp.url $FTP_HOST_PATH_DEMO
            - git config git-ftp.syncroot dist/ # .git-ftp-include file is necessary because dist directory is ignored by .gitignore
            - ls dist
            - git ftp init -s deploy_to_xserver